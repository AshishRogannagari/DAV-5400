{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ca6ee867",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distinct array elements: [ 1  3  5  6  7  8  9 10]\n"
     ]
    }
   ],
   "source": [
    "#1Q)\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "a = np.array([1, 2, 3, 2, 3, 4, 3, 4, 5, 6])\n",
    "b = np.array([7, 2, 10, 2, 7, 4, 9, 4, 9, 8])\n",
    "\n",
    "# Find unique items in each array\n",
    "unique_a = np.unique(a)\n",
    "unique_b = np.unique(b)\n",
    "\n",
    "# Find items that are unique to each array and not in the other\n",
    "res = np.setxor1d(unique_a, unique_b)\n",
    "\n",
    "print(\"Distinct array elements: \" + str(res))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b9663638",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  5,  9, 13, 17],\n",
       "       [ 2,  6, 10, 14, 18],\n",
       "       [ 3,  7, 11, 15, 19],\n",
       "       [ 4,  8, 12, 16, 20]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2Q)\n",
    "\n",
    "\n",
    "array = np.arange(1,21).reshape(5,4).T\n",
    "array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e6096668",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Array : [1, 3, 4, 5, 6, 7, 8, 11, 12, 14, 15, 19]\n"
     ]
    }
   ],
   "source": [
    "#3Q)\n",
    "\n",
    "a = np.array([12, 5, 7, 15, 3, 1, 8])\n",
    "b = np.array([14, 6, 3, 11, 19, 12, 5, 3, 4])\n",
    "\n",
    "# Find elements in b that are not in a\n",
    "elements_to_add = np.setdiff1d(b, a)\n",
    "\n",
    "# Add the new elements to a\n",
    "a = sorted(np.concatenate((a, elements_to_add)))\n",
    "\n",
    "print(\"Final Array : \" + str(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3f4f6cc5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flattened Array : [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]\n"
     ]
    }
   ],
   "source": [
    "#4Q)\n",
    "\n",
    "flattened_array = (array.T).flatten()\n",
    "print(\"Flattened Array : \" + str(flattened_array))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6e5fcd8a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n",
      "The Maximum per capita daily water consumption Year: 1980\n"
     ]
    }
   ],
   "source": [
    "#5Q)\n",
    "\n",
    "#Importing the pandas\n",
    "import pandas\n",
    "\n",
    "# suppress scientific notation\n",
    "np.set_printoptions(suppress = True)\n",
    "\n",
    "# read the data file from GitHub and convert to a NumPy ndarray object\n",
    "# be sure to replace the ‘link_to_raw_copy of data file in your Github Repository’ placeholder shown below\n",
    "# with a link to the “raw” version of the file you pushed to your online GitHub repository\n",
    "nyc_waterr = pandas.read_csv('').to_numpy()\n",
    "\n",
    "# verify you have an ndarray object\n",
    "print(type(nyc_waterr))\n",
    "\n",
    "#a)\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Find the indices of the row with the maximum per capita daily water consumption\n",
    "large_indices = np.where(nyc_waterr[:, 3] >= np.maximum.accumulate(nyc_waterr[:, 3]))\n",
    "print(f\"The Maximum per capita daily water consumption Year: {int(nyc_waterr[large_indices[0][-1], 0])}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d5c2920d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   1979. , 7102100. ,    1512. ,     213. ,       nan],\n",
       "       [   1980. , 7071639. ,    1506. ,     213. ,  -30461. ],\n",
       "       [   1981. , 7089241. ,    1309. ,     185. ,   17602. ],\n",
       "       [   1982. , 7109105. ,    1382. ,     194. ,   19864. ],\n",
       "       [   1983. , 7181224. ,    1424. ,     198. ,   72119. ],\n",
       "       [   1984. , 7234514. ,    1465. ,     203. ,   53290. ],\n",
       "       [   1985. , 7274054. ,    1326. ,     182. ,   39540. ],\n",
       "       [   1986. , 7319246. ,    1351. ,     185. ,   45192. ],\n",
       "       [   1987. , 7342476. ,    1447. ,     197. ,   23230. ],\n",
       "       [   1988. , 7353719. ,    1484. ,     202. ,   11243. ],\n",
       "       [   1989. , 7344175. ,    1402. ,     191. ,   -9544. ],\n",
       "       [   1990. , 7335650. ,    1424. ,     194. ,   -8525. ],\n",
       "       [   1991. , 7374501. ,    1469. ,     199. ,   38851. ],\n",
       "       [   1992. , 7428944. ,    1369. ,     184. ,   54443. ],\n",
       "       [   1993. , 7506166. ,    1368.5,     182. ,   77222. ],\n",
       "       [   1994. , 7570458. ,    1357.7,     179. ,   64292. ],\n",
       "       [   1995. , 7633040. ,    1325.7,     174. ,   62582. ],\n",
       "       [   1996. , 7697812. ,    1297.9,     169. ,   64772. ],\n",
       "       [   1997. , 7773443. ,    1205.5,     155. ,   75631. ],\n",
       "       [   1998. , 7858259. ,    1219.5,     155. ,   84816. ],\n",
       "       [   1999. , 7947660. ,    1237.2,     156. ,   89401. ],\n",
       "       [   2000. , 8008278. ,    1240.4,     155. ,   60618. ],\n",
       "       [   2001. , 8024963.5,    1184. ,     148. ,   16685.5],\n",
       "       [   2002. , 8041649. ,    1135.6,     141. ,   16685.5],\n",
       "       [   2003. , 8058334.5,    1093.7,     136. ,   16685.5],\n",
       "       [   2004. , 8075020. ,    1099.5,     136. ,   16685.5],\n",
       "       [   2005. , 8091705.5,    1138. ,     141. ,   16685.5],\n",
       "       [   2006. , 8108391. ,    1069. ,     132. ,   16685.5],\n",
       "       [   2007. , 8125076.5,    1114. ,     137. ,   16685.5],\n",
       "       [   2008. , 8141762. ,    1098. ,     135. ,   16685.5],\n",
       "       [   2009. , 8158447.5,    1007.5,     123. ,   16685.5],\n",
       "       [   2010. , 8175133. ,    1039. ,     127. ,   16685.5],\n",
       "       [   2011. , 8272963. ,    1021. ,     123. ,   97830. ],\n",
       "       [   2012. , 8348032. ,    1009.1,     121. ,   75069. ],\n",
       "       [   2013. , 8398739. ,    1006.1,     120. ,   50707. ],\n",
       "       [   2014. , 8437387. ,     996. ,     118. ,   38648. ],\n",
       "       [   2015. , 8468181. ,    1009. ,     119. ,   30794. ],\n",
       "       [   2016. , 8475976. ,    1002. ,     118. ,    7795. ],\n",
       "       [   2017. , 8438271. ,     990.2,     117. ,  -37705. ],\n",
       "       [   2018. , 8398748. ,    1007.5,     120. ,  -39523. ],\n",
       "       [   2019. , 8336817. ,     987.4,     118. ,  -61931. ]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#b)\n",
    "\n",
    "# Column added \n",
    "np.column_stack((nyc_waterr, np.diff(nyc_waterr[:, 1], prepend=np.nan)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9d0f8d1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median population: 7947660\n",
      "Population Variance: 214014109798\n"
     ]
    }
   ],
   "source": [
    "#c\n",
    "\n",
    "# Calculate the median and variance of the population\n",
    "print(f\"Median population: {int(np.median(nyc_waterr[:,1]))}\")\n",
    "print(f\"Population Variance: {int(np.var(nyc_waterr[:,1]))}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "56390ff6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Annual change in population: 30867\n"
     ]
    }
   ],
   "source": [
    "#d\n",
    "\n",
    "# Annual change in population\n",
    "population_change = np.diff(nyc_waterr[:,1])\n",
    "\n",
    "# Average annual change\n",
    "print(f\"Average Annual change in population: {int(np.mean(population_change))}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
